<?php

/**
 * @file
 * General drupalcamp fixes
 */

/**
 * Implements hook_menu_alter().
 */
function drupalcamp_menu_alter(&$items) {
  $items['user/register']['title'] = 'Register';
  $items['user/register']['weight'] = 20;
  $items['user/%user/tickets']['access callback'] = FALSE;
  $items['user/%user/edit']['title'] = t('Edit Your Details');
  $items['user/%/sessions']['access callback'] = '_drupalcamp_user_sessions_access';
}

/**
 * Implements hook_module_implements_alter().
 */
function drupalcamp_module_implements_alter(&$implementations, $hook) {
  // When the implementations of hook_menu_alter are called, we need our module
  // to be called after views, so let's remove it from the implementations then
  // add it to the end.
  if ($hook == 'menu_alter') {
    if (isset($implementations['drupalcamp'])) {
      $my_implementation = $implementations['drupalcamp'];
      unset($implementations['drupalcamp']);
      $implementations['drupalcamp'] = $my_implementation;
    }
  }
}

/**
 * Custom access callback to hide user/sessions tab if user has no sessions.
 *
 * @return boolean
 */
function _drupalcamp_user_sessions_access() {
  $uid = arg(1);
  global $user;

  if (!is_numeric($uid) || ($user->uid != $uid) && !user_access('administer content')) {
    return FALSE;
  }

  // Check if user has sessions.
  $sql = db_select('node', 'n');

  $sql->addField('n', 'nid');
  $sql->innerJoin('field_data_field_speakers', 's', 'n.nid = s.entity_id');
  $sql->condition('n.type', 'session', '=');
  $sql->condition('s.field_speakers_target_id', $uid, '=');

  $res = $sql->execute();

  $num = $res->rowCount();

  if ($num > 0) {
    return TRUE;
  }

  return FALSE;
}


/**
 * Implements hook_menu().
 */
function drupalcamp_menu() {
  $items['mailchimp-signup'] = array(
    'title' => 'Sign up for our newsletter',
    'description' => 'Mailchimp newsletter sign up form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalcamp_mailchimp_signup_form'),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function drupalcamp_block_info() {

  $blocks['mailchimp_signup_full'] = array(
    'info' => t('Mailchimp full signup form'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['mailchimp_signup_compact'] = array(
    'info' => t('Mailchimp compact signup form'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function drupalcamp_block_view($delta = '') {
  $blocks = array();
  switch ($delta) {
    case 'mailchimp_signup_full':
      $blocks['subject'] = t('Sign up for our newsletter');
      $blocks['content'] = drupal_get_form('drupalcamp_mailchimp_signup_form', 'full');
      break;

    case 'mailchimp_signup_compact':
      $blocks['subject'] = t('Sign up for our newsletter');
      $blocks['content'] = drupal_get_form('drupalcamp_mailchimp_signup_form', 'compact');
      break;
  }

  return $blocks;
}

/**
 * Returns mailchimpsign up form.
 */
function drupalcamp_mailchimp_signup_form($form, &$form_state, $mode = 'full') {
  $form = array();

  $form['#action'] = '//drupalcamp.us6.list-manage.com/subscribe/post?u=385fb6c8552983dc742af7470&amp;id=1babfa229c';
  $form['#attributes'] = array(
    'id' => 'mc-embedded-subscribe-form',
    'class' => 'validate',
  );

  $form['EMAIL'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address'),
    '#attributes' => array(
      'id' => 'mce-EMAIL',
    ),
    '#required' => TRUE,
  );

  if ($mode == 'full') {
    $form['FNAME'] = array(
      '#type' => 'textfield',
      '#title' => t('First name'),
      '#attributes' => array(
        'id' => 'mce-FNAME',
      )
    );

    $form['LNAME'] = array(
      '#type' => 'textfield',
      '#title' => t('Last name'),
      '#attributes' => array(
        'id' => 'mce-LNAME',
      )
    );

    $form['MMERGE3'] = array(
      '#type' => 'select',
      '#options' => array('nl' => t('Dutch'), 'en' => t('English'), 'fr' => t('French')),
      '#title' => t('Language'),
      '#attributes' => array(
        'id' => 'mce-MMERGE3',
      ),
    );
  }

  $form['mc-response'] = array(
    '#markup' => '<div id="mce-responses" class="clear"><div class="response" id="mce-error-response" style="display:none"></div><div class="response" id="mce-success-response" style="display:none"></div></div>',
  );

  $form['b_385fb6c8552983dc742af7470_1babfa229c'] = array(
    '#type' => 'textfield',
    '#prefix' => '<div style="position: absolute; left: -5000px;">',
    '#suffix' => '</div>',
    '#attributes' => array(
      'tabindex' => -1,
    ),
  );

  $form['subscribe'] = array(
    '#type' => 'submit',
    '#value' => t('Sign up'),
    '#attributes' => array(
//      'class' => 'buttons',
      'id' => 'mc-embedded-subscribe',
    ),
  );

  $form['#attached']['js'] = array(
    '//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js' => array(
      'type' => 'external',
    ),
  );
  $js = "(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';fnames[3]='MMERGE3';ftypes[3]='text';}(jQuery));var $mcj = jQuery.noConflict(true);";

  $form['#attached']['js'][] = array('data' => $js, 'type' => 'inline');

  return $form;
}
