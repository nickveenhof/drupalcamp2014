<?php
/**
 * @file
 * COD Paid Events module.
 */

include_once 'cod_paid_events.features.inc';

/**
 * Form alter for cod registration to add a step to send the registrations to the cart.
 */
function cod_paid_events_ticket_registered_redirect_alter(&$redirect, &$registrations) {
  global $user;
  foreach ($registrations as $registration) {
    $ticket_type = $registration->ticket_type();
    if (!empty($ticket_type->field_ticket_related_product) && $product = commerce_product_load($ticket_type->field_ticket_related_product[LANGUAGE_NONE][0]['product_id'])) {
      // Save the registrations so we can mark status and correlate orders later.
      // Only registrations with related products have associated orders.
      $_SESSION['cod_paid_events_ticket_registrations'][] = $registration->trid;

      // Add line items to the cart.
      $line_item = commerce_product_line_item_new($product);
      commerce_cart_product_add($user->uid, $line_item);
      $redirect = 'checkout';
    }
  }
}

/**
 * Implements hook_commerce_checkout_complete().
 */
function cod_paid_events_commerce_checkout_complete($order) {
  if (!empty($_SESSION['cod_paid_events_ticket_registrations'])) {
    // Mark each of the registrations with the order number.
    foreach ($_SESSION['cod_paid_events_ticket_registrations'] as $trid) {
      $ticket_registration = ticket_registration_load($trid);
      $ticket_registration->field_ticket_order[LANGUAGE_NONE][0]['target_id'] = $order->order_id;

      // Set the completed registration state.
      if (!empty($ticket_registration->ticket_type()->field_complete_state)) {
        $ticket_registration->ticket_state = $ticket_registration->ticket_type()->field_complete_state;
      }

      ticket_registration_save($ticket_registration);
    }
    // Clear out the stored registrations.
    unset($_SESSION['cod_paid_events_ticket_registrations']);
  }
}

/**
 * Implements hook_entity_insert().
 */
function cod_paid_events_entity_insert($entity, $type) {
  cod_paid_events_add_order_instance($entity, $type);
}

/**
 * Implements hook_entity_update().
 */
function cod_paid_events_entity_update($entity, $type) {
  cod_paid_events_add_order_instance($entity, $type);
}

/**
 * Implements hook_entity_presave().
 */
function cod_paid_events_add_order_instance($entity, $type) {
  if ($type == 'ticket_type' && !empty($entity->field_ticket_related_product[LANGUAGE_NONE][0]['product_id'])) {
    $field_name = 'field_ticket_order';
    $entity_type = 'ticket_registration';
    $instances = field_info_instances($entity_type, $entity->ttid);

    if (!isset($instances[$field_name])) {
      // Create field instance on the ticket_registration bundle.
      $instance = array(
        'field_name' => $field_name,
        'entity_type' => $entity_type,
        'bundle' => $entity->ttid,
        'label' => t('Order'),
        'description' => t('The Commerce order related to the registration.'),
        'required' => FALSE,
        'settings' => array(),
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'entityreference',
            'type' => 'entityreference_label',
            'settings' => array(
              'link' => 1,
            ),
            'weight' => 10,
          ),
        ),
        'widget' => array(
          'weight' => 10,
          'type' => 'entityreference_autocomplete',
          'module' => 'entityreference',
          'active' => 1,
          'settings' => array(
            'match_operator' => 'CONTAINS',
            'size' => 60,
            'path' => '',
          ),
        ),
      );

      field_create_instance($instance);
      cache_clear_all('cod_paid_events_order_registrations_instance', 'cache');
    }
  }
}

/**
 * Implements hook_form_FROM_ID_alter().
 */
function cod_paid_events_form_event_node_form_alter(&$form, &$form_state) {
  // Make each ticket type's completed state field dependent on the product being selected.
  foreach (element_children($form['field_event_tickets'][LANGUAGE_NONE]) as $key) {
    if (is_numeric($key)) {
      $element = ':input[name="field_event_tickets[und][' . $key . '][field_ticket_related_product][und]"]';
      $form['field_event_tickets'][LANGUAGE_NONE][$key]['field_complete_state']['#states'] = array(
        'invisible' => array(
          $element => array('value' => '_none'),
        ),
      );
    }
  }
}
